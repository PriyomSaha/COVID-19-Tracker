{"version":3,"sources":["components/image/image.png","components/Data.js","components/Df.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Data","props","date","Date","toDateString","className","recovered","active","deaths","confirmed","DataFetching","useState","posts","setPosts","distData","setDistData","states","setStates","setConfirmed","setActive","setDeath","setRecovered","dist","setDist","state","useEffect","axios","then","res","data","catch","error","console","log","onChange","e","keys","k","target","value","districtData","push","map","x","index","key","type","onClick","deceased","Image","src","image","alt","App","Df","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c89516d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nexport default function Data(props) {\r\n\r\n    var today = new Date();\r\n    var date = today.toDateString();\r\n    return (\r\n        <div>\r\n            <div className=\"card-deck\">\r\n                <div className=\"card green\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\"><b>Recovered</b></h4>\r\n                        <hr />\r\n                        <div className=\"card-text\"><h1>{props.recovered}</h1></div>\r\n                        <div className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></div>\r\n                        <div className=\"card-text\">Number of recoveries from COVID-19</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card yellow\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\"><b>Active</b></h4>\r\n                        <hr />\r\n                        <div className=\"card-text\"><h1>{props.active}</h1></div>\r\n                        <div className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></div>\r\n                        <div className=\"card-text\">Number of active cases of COVID-19.</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card red\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\"><b>Deaths</b></h4>\r\n                        <hr />\r\n                        <div className=\"card-text\"><h1>{props.deaths}</h1></div>\r\n                        <div className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></div>\r\n                        <div className=\"card-text\">Number of deaths caused by COVID-19.</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"card text-center\">\r\n                <div className=\"card-header\">\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\"><b>Total Affected</b></h4>\r\n                    <hr />\r\n                    <div className=\"card-text\"><h1>{props.confirmed}</h1></div>\r\n                    <div className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></div>\r\n                </div>\r\n                <div className=\"card-footer text-muted teal\">\r\n                    C O R O N A\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Data from './Data'\r\n\r\nfunction DataFetching() {\r\nconst [posts, setPosts] = useState([])\r\nconst [distData, setDistData] = useState('')\r\nconst [states, setStates] = useState('')\r\n\r\nconst [confirmed, setConfirmed] = useState('----');\r\nconst [active, setActive] = useState('----')\r\nconst [deaths, setDeath] = useState('----')\r\nconst [recovered, setRecovered] = useState('----')\r\n\r\nconst [dist, setDist] = useState(['Select District'])\r\n\r\nconst state = ['Select State', 'Andaman and Nicobar Islands', 'Andhra Pradesh', 'Arunachal Pradesh', 'Assam', 'Bihar', 'Chandigarh',\r\n'Chhattisgarh', 'Dadra and Nagar Haveli', 'Daman and Diu', 'Delhi', 'Goa', 'Gujarat',\r\n'Haryana', 'Himachal Pradesh', 'Jammu and Kashmir', 'Jharkhand', 'Karnataka\t', 'Kerala', 'Ladakh', 'Lakshadweep', 'Madhya Pradesh',\r\n'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram', 'Nagaland', 'Odisha', 'Puducherry',\r\n'Punjab', 'Rajasthan', 'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh', 'Uttarakhand', 'West Bengal'];\r\n\r\nuseEffect(() => {\r\naxios({\r\n\t\"method\": \"GET\",\r\n\t\"url\": 'https://api.covid19india.org/state_district_wise.json',\r\n})\r\n\t.then((res) => {\r\n\t\tsetPosts(res.data)\r\n\r\n\t})\r\n\t.catch((error) => {\r\n\t\tconsole.log(error)\r\n\t})\r\n},[]);\r\n\r\nconst handleResult = () => {\r\nconsole.log(posts[states].districtData[distData]);\r\nsetConfirmed(posts[states].districtData[distData].confirmed)\r\nsetActive(posts[states].districtData[distData].active)\r\nsetDeath(posts[states].districtData[distData].deceased)\r\nsetRecovered(posts[states].districtData[distData].recovered)\r\n}\r\n\r\nconst handleStatesChange = (e) =>{\r\nvar keys =['Select District']\r\nsetStates(e.target.value)\r\nfor(var k in posts[e.target.value].districtData) keys.push(k);\r\nsetDist(keys)}\r\n\r\nreturn (\r\n<div>\r\n\t<div className=\"row\">\r\n\t\t<div className=\"col\">\r\n\t\t\t<select className=\"select\" onChange={handleStatesChange}>\r\n\t\t\t\t{\r\n\t\t\t\t\tstate.map((x, index) =>\r\n\t\t\t\t\t\t<option key={x} value={x}>{state[index]}</option>)\r\n\t\t\t\t}\r\n\t\t\t</select>\r\n\r\n\t\t\t<select className=\"select state\" onChange = {e => (setDistData(e.target.value))}>\r\n\t\t\t\t{\r\n\t\t\t\t\tdist.map((value) =>\r\n\t\t\t\t\t\t<option key={value}>{value}</option>)\r\n\t\t\t\t}\r\n\t\t\t</select>\r\n\t\t</div>\r\n\r\n\t\t<div className=\"col-4\">\r\n\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={handleResult}>Result</button>\r\n\t\t</div>\r\n\t</div>\r\n\t<br />\r\n\t<Data confirmed={confirmed} active={active} recovered={recovered} deaths={deaths} />\r\n</div>\r\n)\r\n}\r\n\r\nexport default DataFetching\r\n","import React from 'react'\r\nimport image from './image/image.png';\r\nimport '../App.css';\r\n\r\nexport default function Image() {\r\n    return (\r\n        <div>\r\n             <img className=\"image\" src={image} alt=\"COVID-19\" />\r\n             <span><b>India</b></span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Df from './components/Df';\r\nimport Image from './components/Image'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Image />\r\n      <br/>\r\n      <Df />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.register();"],"sourceRoot":""}