{"version":3,"sources":["components/image/image.png","components/Data.js","components/Df.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Data","props","date","Date","toDateString","className","recovered","active","deaths","class","confirmed","DataFetching","useState","posts","setPosts","id","setId","idFromButtonClick","setIdFromButtonClick","useEffect","axios","then","res","console","log","data","response","catch","error","type","placeholder","value","onChange","e","target","onClick","Image","src","image","alt","App","Df","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,mC,oMCI5B,SAASC,EAAKC,GAEzB,IACIC,GADQ,IAAIC,MACCC,eACjB,OACI,6BACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAa,yCAC3B,6BACA,uBAAGA,UAAU,aAAY,4BAAKJ,EAAMK,YACpC,uBAAGD,UAAU,aAAY,2BAAOA,UAAU,cAAjB,cAA0CH,IACnE,uBAAGG,UAAU,aAAb,wCAGR,yBAAKA,UAAU,eACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAa,sCAC3B,6BACA,uBAAGA,UAAU,aAAY,4BAAKJ,EAAMM,SACpC,uBAAGF,UAAU,aAAY,2BAAOA,UAAU,cAAjB,cAA0CH,IACnE,uBAAGG,UAAU,aAAb,yCAGR,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAa,sCAC3B,6BACA,uBAAGA,UAAU,aAAY,4BAAKJ,EAAMO,SACpC,uBAAGH,UAAU,aAAY,2BAAOA,UAAU,cAAjB,cAA0CH,IACnE,uBAAGG,UAAU,aAAb,2CAIZ,yBAAKI,MAAM,oBACP,yBAAKA,MAAM,gBAEX,yBAAKA,MAAM,aACP,wBAAIJ,UAAU,cAAa,8CAC3B,6BACA,uBAAGA,UAAU,aAAY,4BAAKJ,EAAMS,YACpC,uBAAGL,UAAU,aAAY,2BAAOA,UAAU,cAAjB,cAA0CH,KAEvE,yBAAKO,MAAM,+BAAX,iBCCDE,MA5Cf,WAAyB,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,OAEHF,mBAAS,IAFN,mBAEhBG,EAFgB,KAEZC,EAFY,OAG2BJ,mBAAS,GAHpC,mBAGhBK,EAHgB,KAGGC,EAHH,KAKvBC,qBAAU,WACTC,IAAM,CACL,OAAU,MACV,IAAM,oDAAN,OAA2DL,GAC3D,QAAW,CACV,eAAgB,2BAChB,kBAAmB,8BACnB,iBAAkB,wDAGlBM,MAAK,SAACC,GACNC,QAAQC,IAAIF,EAAIG,KAAKC,UACrBZ,EAASQ,EAAIG,KAAKC,aAElBC,OAAM,SAACC,GACPL,QAAQC,IAAII,QAEZ,CAACX,IAEJ,IAIKP,EAAYG,EAAMH,UAClBH,EAASM,EAAMN,OACfD,EAAYO,EAAMP,UAClBE,EAASK,EAAML,OACpB,OACC,6BACC,yBAAKH,UAAU,cACd,2BAAOwB,KAAK,OAAOxB,UAAU,eAAeyB,YAAY,qCAAqCC,MAAOhB,EAAIiB,SAAU,SAAAC,GAAC,OAAIjB,EAAMiB,EAAEC,OAAOH,UACtI,6BACA,4BAAQF,KAAK,SAASxB,UAAU,kBAAkB8B,QAbjC,WACnBjB,EAAqBH,KAYnB,cAED,kBAACf,EAAD,CAAMU,UAAWA,EAAWH,OAAQA,EAAQD,UAAWA,EAAWE,OAAQA,M,iBCxC9D,SAAS4B,IACpB,OACI,6BACK,yBAAK/B,UAAU,QAAQgC,IAAKC,IAAOC,IAAI,cCQrCC,MAVf,WACE,OACE,yBAAKnC,UAAU,aACb,kBAAC+B,EAAD,MACA,6BACA,kBAACK,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM6B,c","file":"static/js/main.fdd8c14c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nexport default function Data(props) {\r\n\r\n    var today = new Date();\r\n    var date = today.toDateString();\r\n    return (\r\n        <div>\r\n            <div className=\"card-deck\">\r\n                <div className=\"card green\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\"><b>Recovered</b></h4>\r\n                        <hr />\r\n                        <p className=\"card-text\"><h1>{props.recovered}</h1></p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></p>\r\n                        <p className=\"card-text\">Number of recoveries from COVID-19</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card yellow\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\"><b>Active</b></h4>\r\n                        <hr />\r\n                        <p className=\"card-text\"><h1>{props.active}</h1></p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></p>\r\n                        <p className=\"card-text\">Number of active cases of COVID-19.</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card red\">\r\n                    <div className=\"card-body\">\r\n                        <h4 className=\"card-title\"><b>Deaths</b></h4>\r\n                        <hr />\r\n                        <p className=\"card-text\"><h1>{props.deaths}</h1></p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></p>\r\n                        <p className=\"card-text\">Number of deaths caused by COVID-19.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card text-center\">\r\n                <div class=\"card-header\">\r\n                </div>\r\n                <div class=\"card-body\">\r\n                    <h4 className=\"card-title\"><b>Total Affected</b></h4>\r\n                    <hr />\r\n                    <p className=\"card-text\"><h1>{props.confirmed}</h1></p>\r\n                    <p className=\"card-text\"><small className=\"text-muted\">Updated on {date}</small></p>\r\n                </div>\r\n                <div class=\"card-footer text-muted teal\">\r\n                    C O R O N A\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport'bootstrap/dist/css/bootstrap.min.css';\r\nimport Data from './Data'\r\n\r\nfunction DataFetching() {\r\n\tconst [posts, setPosts] = useState([])\r\n\tconst [id, setId] = useState('')\r\n\tconst [idFromButtonClick, setIdFromButtonClick] = useState(1)\r\n\r\n\tuseEffect(() => {\r\n\t\taxios({\r\n\t\t\t\"method\": \"GET\",\r\n\t\t\t\"url\": `https://covid19india.p.rapidapi.com/getStateData/${id}`,\r\n\t\t\t\"headers\": {\r\n\t\t\t\t\"content-type\": \"application/octet-stream\",\r\n\t\t\t\t\"x-rapidapi-host\": \"covid19india.p.rapidapi.com\",\r\n\t\t\t\t\"x-rapidapi-key\": \"0577cace1cmsh16549506bfab3dep1a7116jsnaf23580d2668\"\r\n\t\t\t}\r\n\t\t})\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconsole.log(res.data.response);\r\n\t\t\t\tsetPosts(res.data.response)\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t})\r\n\t}, [idFromButtonClick])\r\n\r\n\tconst handleClick = () => {\r\n\t\tsetIdFromButtonClick(id)\r\n\t}\r\n\t\r\nconst confirmed = posts.confirmed;\r\nconst active = posts.active;\r\nconst recovered = posts.recovered;\r\nconst deaths = posts.deaths;\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Enter the ISO Code of the state...\" value={id} onChange={e => setId(e.target.value)} />\r\n\t\t\t\t<br/>\r\n\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={handleClick}>View Data</button>\r\n\t\t\t</div>\r\n\t\t\t<Data confirmed={confirmed} active={active} recovered={recovered} deaths={deaths} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default DataFetching","import React from 'react'\r\nimport image from './image/image.png';\r\nimport '../App.css';\r\n\r\nexport default function Image() {\r\n    return (\r\n        <div>\r\n             <img className=\"image\" src={image} alt=\"COVID-19\" />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Df from './components/Df';\nimport Image from './components/Image'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Image />\n      <br/>\n      <Df />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}